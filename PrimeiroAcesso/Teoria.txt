Para conectar um programa a um BD é necessário ter uma Connection String;
Uma Connection String possui uma composição, sendo: 
    - Server: local onde está rodando o SQL Server, máquina local (localhost ou 127.0.0.1) e porta padrão (1433);
    - Database: nome da base de dados que irá se conectar; 
    - User ID: usuário do banco que irá usar para se conectar;
    - Password: senha do usuário do banco;
    * Exemplo: const string ConnectionString = "Server=localhost,1433; Database=balta; User ID=sa; Password=123456"; 

    * Atenção: para quem usou a autenticação do windows, a Connection String deve vir com: Integrated Security;
      Exemplo: const string ConnectionString = "Server=localhost,1433; Database=balta; Integrated Security=SSPI"; 


A conexão com o BD se dá através de um pacote chamado Microsoft.Data.SqlClient;
    - Esse pacote adicional não vem por padrão dentro do .NET;
    - Uma coisa interessante sobre pacote é que você também pode criar pacotes para distribuir;
    - Tais pacotes são conhecidos como: Nuget Packages;
    - Para usar um pacote externo é necessário instalá-lo na aplicação;
    - Adicionando um pacote (esteja na pasta do projeto): 
            dotnet add package Microsoft.Data.SqlClient
    - Adicionando uma versão específica do pacote: 
            dotnet add package Microsoft.Data.SqlClient --version 2.1.3  
    - Removendo um pacote (caso necessário): 
            dotnet remove package Microsoft.Data.SqlClient (remove a referência no .csproj)        
    
    Para executar uma conexão com o banco precisamos de um objeto do tipo SqlConnection()
        var connection = new SqlConnection();
    Fluxo de conexão: conectamos ao banco, executamos o que queremos e fechamos a conexão
        Abrindo a conexão: connection.Open();
        Fechando a conexão: connection.Close(); 
        Destroi o objeto e fecha a conexão: connection.Dispose(); 
        Se não for usar mais a connection use Dispose(), caso contrário terá que fazer outro new
    Dicas: 
        a) ao abrir uma conexão busque fazer todas as operações necessárias, pois a abertura e fechamento
        constantes tornam mais lento o processo;
        b) use o using no connection fica bem mais prático;
    
    Usar o ADO.NET puro como foi feito nesse exemplo não é prático, porém é muito performático; 
    Normalmente no dia-a-dia optamos por usar o DAPPER ou o Entity Framework;
    