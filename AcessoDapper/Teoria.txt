-- INTRODUÇÃO: 

- Iremos usar o pacote externo Dapper, mantendo o Microsoft.Data.SqlClient;
- Ele é uma extensão do Microsoft.Data.SqlClient, onde adiciona algumas funcionalidades a ele; 
- A realização da conexão ainda é necessária, mas ele se vira para abrir a conexão caso não exista;
- Além disso, os comandos são encapsulados, executa a query e transforma para um objeto (mapeamento);
- Instalação do Dapper: dotnet add package Dapper
- Instalação versão específica: dotnet add package Dapper --version 2.0.9
- O primeiro passo para começar a query é criar um item chamado de modelo (model), pois o Dapper fará um de..para;
- Não é uma regra, porém para cada tabela do banco haverá uma classe na pasta Models (modelo);
- O dapper irá transformar a informação de um SqlDataRow para um objeto mapeado à partir da classe; 
- Necessário importar o Dapper (using.Dapper) e ai executaremos o método Query() do objeto connection;
- No método Query("consulta")<Tipo> já entende que o retorno será uma lista desse tipo;
- Se quiser trazer um único item ai usaríamos o método First() e não o Query();
- Para que o mapeamento ocorra adequadamente, os campos do SQL deve ser o mesmo da classe. No SQL podemos
  usar o ALIAS para deixar como mesmo nome;
- Uma coisa interessante é sempre deixar na mesma ordem os campos que o SQL retorna e na classe;

-- TRABALHANDO COM INSERTS:

- Ao inserir dados devemos nos preocupar com alguns pontos a mais do que a consulta;
- Ao trabalhar com GUID, por exemplo, podemos gerar um Guid.NewGuid() no C# e enviar para o banco
  ou no próprio insert enviar o comando NEWID();
- Dica do balta: gerar o máximo possível de informações na aplicação e usar o SQL só para manipulação 
  de dados. Ele não gosta de usar as funções para gerar informações pelo banco, como: data, guid, etc;
- Isso acontece, pois o C# permite testes posteriores, tornando muito mais rico e fácil o teste de unidade;
- Evitar muito processamento enquanto a conexão estiver aberta. Em nosso exemplo, veja que a nova categoria foi   
  criada antes e dentro do using (quando a conexão está aberta), ela só é inserida; 
- SQL INJECTION: tipo de ataque muito conhecido que passa comandos SQL através de um INSERT ou campo;
- É necessário prevenir esse tipo de coisa e o Dapper já possui mecanismos para evitar esse tipo de coisa;
- Nunca devemos fazer concatenção de strings em inserts, updates e até mesmo selects. Devemos usar parâmetros;
- No Dapper a forma de passar parâmetros é através do @ (arroba) na string do comando SQL; 
- Para não precisar escrever tanto código a recomendação do Balta é usar o mesmo nome das propriedades;
- A execução se dá através do método Execute() do objeto connection, onde: o primeiro parâmetro é o SQL com os parâmetros;
- Assim como a consulta, o UPDATE e o DELETE também são executandos usando o Execute();
  e o segundo um objeto anônimo com os valores do parâmetros; 
- Caso os parâmetros tenham nomes diferentes das propriedades é necessário informar no objeto anônimo;
- O método Execute() irá sempre retornar um número inteiro com a quantidade de linhas que foram afetadas;

-- TRABALHANDO COM UPDATE:

- Funciona de forma similar ao INSERT, usando o método EXECUTE() do objeto connection;
- O retorno do método Execute() é a quantidade de linhas afetadas;
- Caso não encontre o registro para alterar será informado que nada foi alterado.


-- MÉTODO EXECUTEMANY() DO Dapper:

- Consiste na possibilidade de inserir múltiplos itens ao mesmo tempo variando os parâmetros;
- Ao invés de passar um objeto no parâmetro passo um array de objetos separando cada item por vírgula; 
- O mesmo vale para os métodos DELETEMANY() e UPDATEMANY();
- Eles permitem alterar ou apagar múltiplos itens de uma vez; 


-- EXECUTANDO PROCEDURES NO DAPPER: 
-  O Dapper também permite realizar a execução de Stored Procedures; 
-  Como no Execute passamos o tipo como StoredProcedure, não é necessário informar o EXEC e nem o parâmetro;
   var sql = "[spDeleteStudent]";
- A execução também se dá através do método Execute() do objeto connection, porém passando o tipo de comando; 
- connection.Execute(sql, parâmetros, commandType: System.Data.commandType.StoredProcedure);
- Irá retornar também o número de linhas afetadas com a execução da SP;
